console.log('üü¢ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...');

const express = require('express');
const axios = require('axios');
const cors = require('cors');
const fs = require('fs');

const app = express();
const PORT = process.env.PORT || 10000;

// Middleware
app.use(cors());
app.use(express.json());

// üìÅ –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const USERS_FILE = 'users.json';

// üìä –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
function loadUsers() {
    try {
        if (fs.existsSync(USERS_FILE)) {
            const data = fs.readFileSync(USERS_FILE, 'utf8');
            return JSON.parse(data);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    }
    return [];
}

// üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª
function saveUsers(users) {
    try {
        fs.writeFileSync(USERS_FILE, JSON.stringify(users, null, 2));
        console.log('üíæ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    }
}

// üöÄ –û—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
app.post('/api/yandex-auth', async (req, res) => {
    console.log('üì® –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é');
    
    try {
        const { code } = req.body;

        if (!code) {
            return res.status(400).json({
                success: false,
                error: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
            });
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –æ—Ç –Ø–Ω–¥–µ–∫—Å
        const tokenResponse = await axios.post(
            'https://oauth.yandex.ru/token',
            `grant_type=authorization_code&code=${code}&client_id=872c3f930c404f929e2f55b77d94c94c&client_secret=d900e81d1c2144648549314afda460bb`,
            {
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                timeout: 10000
            }
        );

        const accessToken = tokenResponse.data.access_token;

        if (!accessToken) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞');
        }

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userResponse = await axios.get('https://login.yandex.ru/info', {
            headers: {
                'Authorization': `OAuth ${accessToken}`
            },
            params: { format: 'json' },
            timeout: 10000
        });

        const userData = userResponse.data;

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const users = loadUsers();
        
        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = {
            id: userData.id,
            login: userData.login,
            email: userData.default_email || 'no-email',
            first_name: userData.first_name,
            last_name: userData.last_name,
            sex: userData.sex,
            last_login: new Date().toLocaleString('ru-RU')
        };

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        const existingIndex = users.findIndex(u => u.id === userData.id);
        if (existingIndex !== -1) {
            users[existingIndex] = user; // –û–±–Ω–æ–≤–ª—è–µ–º
        } else {
            users.push(user); // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        saveUsers(users);

        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', user.email);

        // –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        res.json({
            success: true,
            user: {
                id: user.id,
                login: user.login,
                email: user.email,
                first_name: user.first_name,
                last_name: user.last_name
            }
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
        
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
            details: error.message
        });
    }
});

// üìä –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
app.get('/api/users', (req, res) => {
    const users = loadUsers();
    res.json({ success: true, users });
});

// üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
app.get('/api/stats', (req, res) => {
    const users = loadUsers();
    res.json({ 
        success: true, 
        total_users: users.length,
        last_login: users[0] ? users[0].last_login : '–Ω–µ—Ç'
    });
});

// üß™ –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç
app.get('/api/test', (req, res) => {
    const users = loadUsers();
    res.json({ 
        success: true,
        message: '–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç! ‚úÖ',
        users_count: users.length,
        storage: 'file_system'
    });
});

// üîê –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
app.get('/admin', (req, res) => {
    const users = loadUsers();
    
    const html = `
<!DOCTYPE html>
<html>
<head>
    <title>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</title>
    <meta charset="UTF-8">
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5; }
        .container { max-width: 800px; margin: 0 auto; background: white; padding: 20px; border-radius: 10px; }
        h1 { color: #333; text-align: center; }
        .stats { background: #e3f2fd; padding: 15px; border-radius: 5px; margin-bottom: 20px; }
        table { width: 100%; border-collapse: collapse; margin-top: 15px; }
        th, td { padding: 10px; text-align: left; border-bottom: 1px solid #ddd; }
        th { background: #2196F3; color: white; }
    </style>
</head>
<body>
    <div class="container">
        <h1>üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</h1>
        <div class="stats">
            <h3>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
            <p>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <strong>${users.length}</strong></p>
            ${users.length > 0 ? `<p>–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: <strong>${users[0].last_login}</strong></p>` : ''}
        </div>
        <h3>üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h3>
        ${users.length > 0 ? `
            <table>
                <tr><th>ID</th><th>–ò–º—è</th><th>Email</th><th>–õ–æ–≥–∏–Ω</th><th>–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥</th></tr>
                ${users.map(user => `
                    <tr>
                        <td>${user.id}</td>
                        <td><strong>${user.first_name} ${user.last_name}</strong></td>
                        <td>${user.email}</td>
                        <td>${user.login}</td>
                        <td>${user.last_login}</td>
                    </tr>
                `).join('')}
            </table>
        ` : '<p style="text-align: center; color: #666; padding: 40px;">–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</p>'}
    </div>
</body>
</html>`;
    
    res.send(html);
});

// üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    const users = loadUsers();
    console.log('==================================');
    console.log('üöÄ –°–ï–†–í–ï–† –ó–ê–ü–£–©–ï–ù!');
    console.log(`üìç –ü–æ—Ä—Ç: ${PORT}`);
    console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);
    console.log(`üìç –¢–µ—Å—Ç: http://localhost:${PORT}/api/test`);
    console.log(`üìç –ê–¥–º–∏–Ω: http://localhost:${PORT}/admin`);
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª: –í–ö–õ–Æ–ß–ï–ù–û');
    console.log('==================================');
});
