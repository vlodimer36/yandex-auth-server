console.log('üü¢ –ó–∞–ø—É—Å–∫–∞—é—Å—å...');

const express = require('express');
const axios = require('axios');
const cors = require('cors');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 10000;

// Middleware
app.use(cors());
app.use(express.json());

// üìÅ –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
const usersFilePath = path.join(__dirname, 'users.json');

// üîÑ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function loadUsers() {
    try {
        if (fs.existsSync(usersFilePath)) {
            const data = fs.readFileSync(usersFilePath, 'utf8');
            return JSON.parse(data);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    }
    return [];
}

// üíæ –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function saveUsers(users) {
    try {
        fs.writeFileSync(usersFilePath, JSON.stringify(users, null, 2));
        console.log('üíæ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    }
}

// üë§ –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function saveUserToFile(userData) {
    try {
        const users = loadUsers();
        const userEmail = userData.default_email || userData.emails?.[0] || 'no-email';
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        const existingUserIndex = users.findIndex(u => u.id === userData.id);
        
        if (existingUserIndex !== -1) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
            users[existingUserIndex] = {
                ...users[existingUserIndex],
                ...userData,
                email: userEmail,
                last_login: new Date().toISOString()
            };
        } else {
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ
            users.push({
                id: userData.id,
                login: userData.login,
                email: userEmail,
                first_name: userData.first_name,
                last_name: userData.last_name,
                sex: userData.sex,
                avatar_url: userData.avatar_url,
                first_login: new Date().toISOString(),
                last_login: new Date().toISOString()
            });
        }
        
        saveUsers(users);
        console.log('üíæ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', userEmail);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
    }
}

// üöÄ –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±–º–µ–Ω–∞ –∫–æ–¥–∞ –Ω–∞ —Ç–æ–∫–µ–Ω
app.post('/api/yandex-auth', async (req, res) => {
    console.log('üì® –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é');
    
    try {
        const { code } = req.body;

        if (!code) {
            return res.status(400).json({
                success: false,
                error: 'Authorization code is required'
            });
        }

        // –ü–æ–ª—É—á–∞–µ–º access token –æ—Ç –Ø–Ω–¥–µ–∫—Å
        const params = new URLSearchParams();
        params.append('grant_type', 'authorization_code');
        params.append('code', code);
        params.append('client_id', process.env.CLIENT_ID);
        params.append('client_secret', process.env.CLIENT_SECRET);

        const tokenResponse = await axios.post(
            'https://oauth.yandex.ru/token',
            params,
            {
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                }
            }
        );

        const accessToken = tokenResponse.data.access_token;

        if (!accessToken) {
            throw new Error('Failed to get access token');
        }

        // üî• –í–°–ï –î–ê–ù–ù–´–ï –í –û–î–ù–û–ú –ó–ê–ü–†–û–°–ï!
        const userResponse = await axios.get('https://login.yandex.ru/info', {
            headers: {
                'Authorization': `OAuth ${accessToken}`
            },
            params: {
                'format': 'json'
            }
        });

        const userData = userResponse.data;
        console.log('üìä –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userData);

        // üÜï –ü–û–õ–£–ß–ê–ï–ú –ê–í–ê–¢–ê–†–ö–£ –∏–∑ –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        let avatarUrl = null;
        if (userData && userData.default_avatar_id && userData.default_avatar_id !== '0') {
            avatarUrl = `https://avatars.yandex.net/get-yapic/${userData.default_avatar_id}/islands-200`;
            console.log('‚úÖ –ê–≤–∞—Ç–∞—Ä–∫–∞ –Ω–∞–π–¥–µ–Ω–∞:', avatarUrl);
        } else {
            console.log('‚ÑπÔ∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–∫–∏ –≤ –Ø–Ω–¥–µ–∫—Å –∞–∫–∫–∞—É–Ω—Ç–µ');
        }

        // ‚úÖ –°–û–•–†–ê–ù–Ø–ï–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
        saveUserToFile({
            ...userData,
            avatar_url: avatarUrl
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        res.json({
            success: true,
            user: {
                id: userData.id,
                login: userData.login,
                email: userData.default_email || userData.emails?.[0] || 'no-email',
                first_name: userData.first_name,
                last_name: userData.last_name,
                sex: userData.sex,
                avatar_url: avatarUrl
            }
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error.response?.data || error.message);
        res.status(500).json({
            success: false,
            error: 'Authentication failed',
            details: error.response?.data || error.message
        });
    }
});

// üìä –ú–∞—Ä—à—Ä—É—Ç: –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
app.get('/api/users', (req, res) => {
    try {
        const users = loadUsers();
        res.json({ success: true, users: users });
    } catch (error) {
        res.status(500).json({ success: false, error: error.message });
    }
});

// üìà –ú–∞—Ä—à—Ä—É—Ç: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
app.get('/api/stats', (req, res) => {
    try {
        const users = loadUsers();
        res.json({ 
            success: true, 
            total_users: users.length,
            last_user: users.length > 0 ? users[users.length - 1] : null
        });
    } catch (error) {
        res.status(500).json({ success: false, error: error.message });
    }
});

// üîê –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨
app.get('/admin', (req, res) => {
    try {
        const users = loadUsers();

        let html = `<!DOCTYPE html><html><head><title>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</title>
        <meta charset="UTF-8"><style>body{font-family:Arial,sans-serif;margin:20px;background:#f5f5f5;}
        .container{max-width:1200px;margin:0 auto;background:white;padding:30px;border-radius:12px;box-shadow:0 2px 10px rgba(0,0,0,0.1);}
        h1{color:#333;text-align:center;}h3{color:#444;}.stats{background:#e3f2fd;padding:20px;border-radius:8px;margin-bottom:25px;}
        table{width:100%;border-collapse:collapse;margin-top:20px;}th,td{padding:12px;text-align:left;border-bottom:1px solid #ddd;}
        th{background:#2196F3;color:white;}tr:hover{background:#f5f5f5;}.avatar-cell{text-align:center;}
        .avatar-img{width:40px;height:40px;border-radius:50%;object-fit:cover;border:2px solid #fff;box-shadow:0 1px 3px rgba(0,0,0,0.2);}
        .no-avatar{width:40px;height:40px;border-radius:50%;background:#667eea;color:white;display:flex;align-items:center;justify-content:center;
        font-weight:bold;font-size:14px;margin:0 auto;}</style></head><body><div class="container">`;

        html += '<h1>üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</h1><div class="stats"><h3>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>';
        html += '<p>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <strong>' + users.length + '</strong></p>';
        
        if (users.length > 0) {
            html += '<p>–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: <strong>' + new Date(users[users.length-1].last_login).toLocaleString('ru-RU') + '</strong></p>';
        }
        
        html += '</div><h3>üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h3>';
        
        if (users.length > 0) {
            html += '<table><tr><th>ID</th><th>–ê–≤–∞—Ç–∞—Ä</th><th>–ò–º—è</th><th>Email</th><th>–ü–æ–ª</th><th>–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥</th></tr>';
            
            users.forEach(user => {
                const initials = (user.first_name?.[0] || '') + (user.last_name?.[0] || '');
                html += '<tr>';
                html += '<td><code>' + user.id + '</code></td>';
                html += '<td class="avatar-cell">' + 
                    (user.avatar_url ? 
                        '<img src="' + user.avatar_url + '" class="avatar-img" alt="Avatar">' : 
                        '<div class="no-avatar">' + initials + '</div>') + 
                    '</td>';
                html += '<td><strong>' + (user.first_name || '') + ' ' + (user.last_name || '') + '</strong></td>';
                html += '<td>' + (user.email || 'no-email') + '</td>';
                html += '<td>' + (user.sex === 'male' ? '‚ôÇ –ú—É–∂—Å–∫–æ–π' : user.sex === 'female' ? '‚ôÄ –ñ–µ–Ω—Å–∫–∏–π' : '–ù–µ —É–∫–∞–∑–∞–Ω') + '</td>';
                html += '<td>' + new Date(user.last_login).toLocaleString('ru-RU') + '</td>';
                html += '</tr>';
            });
            
            html += '</table>';
        } else {
            html += '<p style="text-align:center;color:#666;padding:40px;">–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</p>';
        }
        
        html += '</div></body></html>';
        
        res.send(html);

    } catch (error) {
        res.status(500).send('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏');
    }
});

// üß™ –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç
app.get('/api/test', (req, res) => {
    const users = loadUsers();
    res.json({ 
        message: '–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!',
        version: '2.0',
        total_users: users.length,
        persistent_storage: true
    });
});

// üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    const users = loadUsers();
    console.log('==================================');
    console.log('üöÄ –°–ï–†–í–ï–† –ó–ê–ü–£–©–ï–ù!');
    console.log(`üìç –ü–æ—Ä—Ç: ${PORT}`);
    console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: ${users.length}`);
    console.log(`üìç –¢–µ—Å—Ç: http://localhost:${PORT}/api/test`);
    console.log(`üìç –ê–¥–º–∏–Ω: http://localhost:${PORT}/admin`);
    console.log('üíæ –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: –í–ö–õ–Æ–ß–ï–ù–û');
    console.log('==================================');
});
