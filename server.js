console.log('üü¢ –ó–∞–ø—É—Å–∫–∞—é—Å—å...');

const express = require('express');
const axios = require('axios');
const cors = require('cors');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 10000;

// Middleware
app.use(cors());
app.use(express.json());

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª
function saveUserToFile(userData) {
    try {
        const filePath = path.join(__dirname, 'users.json');
        let users = [];
        
        // –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if (fs.existsSync(filePath)) {
            const data = fs.readFileSync(filePath, 'utf8');
            users = JSON.parse(data);
        }
        
        // –ü–æ–ª—É—á–∞–µ–º email (–∏—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É —Å undefined)
        const userEmail = userData.default_email || userData.emails?.[0] || 'no-email';
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        const existingUserIndex = users.findIndex(u => u.id === userData.id);
        
        if (existingUserIndex !== -1) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
            users[existingUserIndex] = {
                ...users[existingUserIndex],
                ...userData,
                email: userEmail,
                last_login: new Date().toISOString()
            };
        } else {
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ
            users.push({
                id: userData.id,
                login: userData.login,
                email: userEmail,
                first_name: userData.first_name,
                last_name: userData.last_name,
                sex: userData.sex,
                avatar_url: userData.avatar_url,
                first_login: new Date().toISOString(),
                last_login: new Date().toISOString()
            });
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
        fs.writeFileSync(filePath, JSON.stringify(users, null, 2));
        console.log('üíæ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', userEmail);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
    }
}

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±–º–µ–Ω–∞ –∫–æ–¥–∞ –Ω–∞ —Ç–æ–∫–µ–Ω
app.post('/api/yandex-auth', async (req, res) => {
    console.log('üì® –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é');
    
    try {
        const { code } = req.body;

        if (!code) {
            return res.status(400).json({
                success: false,
                error: 'Authorization code is required'
            });
        }

        // –ü–æ–ª—É—á–∞–µ–º access token –æ—Ç –Ø–Ω–¥–µ–∫—Å
        const params = new URLSearchParams();
        params.append('grant_type', 'authorization_code');
        params.append('code', code);
        params.append('client_id', process.env.CLIENT_ID);
        params.append('client_secret', process.env.CLIENT_SECRET);

        const tokenResponse = await axios.post(
            'https://oauth.yandex.ru/token',
            params,
            {
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                }
            }
        );

        const accessToken = tokenResponse.data.access_token;

        if (!accessToken) {
            throw new Error('Failed to get access token');
        }

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userResponse = await axios.get('https://login.yandex.ru/info', {
            headers: {
                'Authorization': `OAuth ${accessToken}`
            },
            params: {
                'format': 'json'
            }
        });

        const userData = userResponse.data;

        // üÜï –ü–û–õ–£–ß–ê–ï–ú –ò–ù–§–û–†–ú–ê–¶–ò–Æ –û–ë –ê–í–ê–¢–ê–†–ö–ï
        let avatarUrl = null;
        try {
            const avatarInfoResponse = await axios.get('https://login.yandex.ru/info', {
                headers: {
                    'Authorization': `OAuth ${accessToken}`
                },
                params: {
                    'format': 'json'
                }
            });

            const avatarInfo = avatarInfoResponse.data;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–≤–∞—Ç–∞—Ä–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (avatarInfo && avatarInfo.default_avatar_id && avatarInfo.default_avatar_id !== '0') {
                // –§–æ—Ä–º–∏—Ä—É–µ–º URL –∞–≤–∞—Ç–∞—Ä–∫–∏ (islands-200 - —Ä–∞–∑–º–µ—Ä 200x200)
                avatarUrl = `https://avatars.yandex.net/get-yapic/${avatarInfo.default_avatar_id}/islands-200`;
                console.log('‚úÖ –ê–≤–∞—Ç–∞—Ä–∫–∞ –Ω–∞–π–¥–µ–Ω–∞:', avatarUrl);
            } else {
                console.log('‚ÑπÔ∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–∫–∏ –≤ –Ø–Ω–¥–µ–∫—Å –∞–∫–∫–∞—É–Ω—Ç–µ');
            }
        } catch (avatarError) {
            console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É:', avatarError.message);
        }

        // ‚úÖ –°–û–•–†–ê–ù–Ø–ï–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –í –§–ê–ô–õ
        saveUserToFile({
            ...userData,
            avatar_url: avatarUrl
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        res.json({
            success: true,
            user: {
                id: userData.id,
                login: userData.login,
                email: userData.default_email || userData.emails?.[0] || 'no-email',
                first_name: userData.first_name,
                last_name: userData.last_name,
                sex: userData.sex,
                avatar_url: avatarUrl // üÜï –î–æ–±–∞–≤–ª—è–µ–º URL –∞–≤–∞—Ç–∞—Ä–∫–∏
            }
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
        res.status(500).json({
            success: false,
            error: 'Authentication failed'
        });
    }
});

// üìä –ú–∞—Ä—à—Ä—É—Ç: –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (JSON)
app.get('/api/users', (req, res) => {
    try {
        const filePath = path.join(__dirname, 'users.json');
        if (fs.existsSync(filePath)) {
            const data = fs.readFileSync(filePath, 'utf8');
            const users = JSON.parse(data);
            res.json({ success: true, users: users });
        } else {
            res.json({ success: true, users: [], message: '–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' });
        }
    } catch (error) {
        res.status(500).json({ success: false, error: error.message });
    }
});

// üìà –ú–∞—Ä—à—Ä—É—Ç: –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
app.get('/api/stats', (req, res) => {
    try {
        const filePath = path.join(__dirname, 'users.json');
        if (fs.existsSync(filePath)) {
            const data = fs.readFileSync(filePath, 'utf8');
            const users = JSON.parse(data);
            res.json({ 
                success: true, 
                total_users: users.length,
                last_user: users.length > 0 ? users[users.length - 1] : null
            });
        } else {
            res.json({ success: true, total_users: 0 });
        }
    } catch (error) {
        res.status(500).json({ success: false, error: error.message });
    }
});

// üîê –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ - –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
app.get('/admin', (req, res) => {
    try {
        const filePath = path.join(__dirname, 'users.json');
        let users = [];
        
        if (fs.existsSync(filePath)) {
            const data = fs.readFileSync(filePath, 'utf8');
            users = JSON.parse(data);
        }

        // –ü—Ä–æ—Å—Ç–∞—è HTML-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö —à–∞–±–ª–æ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
        let html = '<!DOCTYPE html><html><head><title>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</title>';
        html += '<meta charset="UTF-8"><style>body{font-family:Arial,sans-serif;margin:20px;}';
        html += '.container{max-width:1200px;margin:0 auto;}h1{color:#333;}';
        html += 'table{width:100%;border-collapse:collapse;}th,td{padding:10px;border:1px solid #ddd;}';
        html += 'th{background:#f5f5f5;}</style></head><body>';
        html += '<div class="container"><h1>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</h1>';
        
        html += '<h3>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>';
        html += '<p>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <strong>' + users.length + '</strong></p>';
        
        if (users.length > 0) {
            html += '<p>–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: <strong>' + new Date(users[users.length-1].last_login).toLocaleString('ru-RU') + '</strong></p>';
        }
        
        html += '<h3>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h3>';
        
        if (users.length > 0) {
            html += '<table><tr><th>ID</th><th>–ò–º—è</th><th>Email</th><th>–ê–≤–∞—Ç–∞—Ä</th><th>–ü–æ–ª</th><th>–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥</th></tr>';
            
            users.forEach(user => {
                html += '<tr>';
                html += '<td>' + user.id + '</td>';
                html += '<td><strong>' + (user.first_name || '') + ' ' + (user.last_name || '') + '</strong></td>';
                html += '<td>' + (user.email || 'no-email') + '</td>';
                html += '<td>' + (user.avatar_url ? '‚úÖ –ï—Å—Ç—å' : '‚ùå –ù–µ—Ç') + '</td>';
                html += '<td>' + (user.sex === 'male' ? '–ú—É–∂—Å–∫–æ–π' : user.sex === 'female' ? '–ñ–µ–Ω—Å–∫–∏–π' : '–ù–µ —É–∫–∞–∑–∞–Ω') + '</td>';
                html += '<td>' + new Date(user.last_login).toLocaleString('ru-RU') + '</td>';
                html += '</tr>';
            });
            
            html += '</table>';
        } else {
            html += '<p>–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</p>';
        }
        
        html += '</div></body></html>';
        
        res.send(html);

    } catch (error) {
        res.status(500).send('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: ' + error.message);
    }
});

// –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç
app.get('/api/test', (req, res) => {
    res.json({ 
        message: '–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!',
        version: '1.0',
        has_database: true,
        admin_panel: '/admin',
        features: 'avatar_support' // üÜï –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–≤–∞—Ç–∞—Ä–æ–∫
    });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log('==================================');
    console.log('üöÄ –°–ï–†–í–ï–† –ó–ê–ü–£–©–ï–ù!');
    console.log(`üìç –ü–æ—Ä—Ç: ${PORT}`);
    console.log(`üìç –¢–µ—Å—Ç: http://localhost:${PORT}/api/test`);
    console.log(`üìç –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: http://localhost:${PORT}/admin`);
    console.log('üÜï –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–≤–∞—Ç–∞—Ä–æ–∫: –í–ö–õ–Æ–ß–ï–ù–ê');
    console.log('==================================');
});
