console.log('üü¢ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...');

const express = require('express');
const axios = require('axios');
const cors = require('cors');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 10000;

// Middleware
app.use(cors({
    origin: ['https://rustorguo.ru', 'http://localhost:3000'],
    credentials: true
}));
app.use(express.json());

// üìÅ –ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const usersDir = path.join(__dirname, 'users');

// üîÑ –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
if (!fs.existsSync(usersDir)) {
    fs.mkdirSync(usersDir, { recursive: true });
    console.log('üìÅ –ü–∞–ø–∫–∞ users —Å–æ–∑–¥–∞–Ω–∞');
}

// üíæ –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function saveUser(userData) {
    try {
        const userId = userData.id;
        const userEmail = userData.default_email || 'no-email';
        
        const user = {
            id: userId,
            login: userData.login,
            email: userEmail,
            first_name: userData.first_name,
            last_name: userData.last_name,
            sex: userData.sex,
            first_login: new Date().toISOString(),
            last_login: new Date().toISOString()
        };
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        const userFile = path.join(usersDir, `${userId}.json`);
        fs.writeFileSync(userFile, JSON.stringify(user, null, 2));
        
        console.log('üíæ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', userEmail);
        return user;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
        return null;
    }
}

// üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function loadUsers() {
    try {
        if (!fs.existsSync(usersDir)) return [];
        
        const files = fs.readdirSync(usersDir);
        const users = [];
        
        for (const file of files) {
            if (file.endsWith('.json')) {
                try {
                    const filePath = path.join(usersDir, file);
                    const data = fs.readFileSync(filePath, 'utf8');
                    const user = JSON.parse(data);
                    users.push(user);
                } catch (e) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', file);
                }
            }
        }
        
        return users.sort((a, b) => new Date(b.last_login) - new Date(a.last_login));
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
        return [];
    }
}

// üöÄ –û—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
app.post('/api/yandex-auth', async (req, res) => {
    console.log('üì® –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é');
    
    try {
        const { code } = req.body;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞
        if (!code) {
            return res.status(400).json({
                success: false,
                error: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
            });
        }

        console.log('üîê –û–±–º–µ–Ω –∫–æ–¥–∞ –Ω–∞ —Ç–æ–∫–µ–Ω...');

        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –æ—Ç –Ø–Ω–¥–µ–∫—Å
        const tokenResponse = await axios.post(
            'https://oauth.yandex.ru/token',
            `grant_type=authorization_code&code=${code}&client_id=${process.env.CLIENT_ID}&client_secret=${process.env.CLIENT_SECRET}`,
            {
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                timeout: 10000
            }
        );

        const accessToken = tokenResponse.data.access_token;

        if (!accessToken) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞');
        }

        console.log('‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω');

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userResponse = await axios.get('https://login.yandex.ru/info', {
            headers: {
                'Authorization': `OAuth ${accessToken}`
            },
            params: { format: 'json' },
            timeout: 10000
        });

        const userData = userResponse.data;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const savedUser = saveUser(userData);

        if (!savedUser) {
            throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        }

        // –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        res.json({
            success: true,
            user: {
                id: savedUser.id,
                login: savedUser.login,
                email: savedUser.email,
                first_name: savedUser.first_name,
                last_name: savedUser.last_name,
                sex: savedUser.sex
            }
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error.message);
        
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
            details: error.message
        });
    }
});

// üìä –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
app.get('/api/users', (req, res) => {
    try {
        const users = loadUsers();
        res.json({ success: true, users });
    } catch (error) {
        res.status(500).json({ success: false, error: error.message });
    }
});

// üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
app.get('/api/stats', (req, res) => {
    try {
        const users = loadUsers();
        res.json({ 
            success: true, 
            total_users: users.length,
            last_login: users[0] ? new Date(users[0].last_login).toLocaleString('ru-RU') : '–Ω–µ—Ç'
        });
    } catch (error) {
        res.status(500).json({ success: false, error: error.message });
    }
});

// üß™ –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç
app.get('/api/test', (req, res) => {
    res.json({ 
        success: true,
        message: '–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç! ‚úÖ',
        timestamp: new Date().toLocaleString('ru-RU')
    });
});

// üîê –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
app.get('/admin', (req, res) => {
    try {
        const users = loadUsers();
        
        const html = `
<!DOCTYPE html>
<html>
<head>
    <title>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</title>
    <meta charset="UTF-8">
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5; }
        .container { max-width: 1200px; margin: 0 auto; background: white; padding: 30px; border-radius: 12px; }
        h1 { color: #333; text-align: center; }
        .stats { background: #e3f2fd; padding: 20px; border-radius: 8px; margin-bottom: 25px; }
        table { width: 100%; border-collapse: collapse; margin-top: 20px; }
        th, td { padding: 12px; text-align: left; border-bottom: 1px solid #ddd; }
        th { background: #2196F3; color: white; }
    </style>
</head>
<body>
    <div class="container">
        <h1>üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</h1>
        <div class="stats">
            <h3>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
            <p>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <strong>${users.length}</strong></p>
            ${users.length > 0 ? `<p>–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: <strong>${new Date(users[0].last_login).toLocaleString('ru-RU')}</strong></p>` : ''}
        </div>
        <h3>üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h3>
        ${users.length > 0 ? `
            <table>
                <tr><th>ID</th><th>–ò–º—è</th><th>Email</th><th>–õ–æ–≥–∏–Ω</th><th>–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥</th></tr>
                ${users.map(user => `
                    <tr>
                        <td>${user.id}</td>
                        <td><strong>${user.first_name} ${user.last_name}</strong></td>
                        <td>${user.email}</td>
                        <td>${user.login}</td>
                        <td>${new Date(user.last_login).toLocaleString('ru-RU')}</td>
                    </tr>
                `).join('')}
            </table>
        ` : '<p style="text-align: center; color: #666; padding: 40px;">–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</p>'}
    </div>
</body>
</html>`;
        
        res.send(html);

    } catch (error) {
        res.status(500).send('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏');
    }
});

// üè† –ö–æ—Ä–Ω–µ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç
app.get('/', (req, res) => {
    res.json({
        message: 'Yandex Auth Server',
        endpoints: {
            test: '/api/test',
            auth: '/api/yandex-auth (POST)',
            users: '/api/users',
            stats: '/api/stats',
            admin: '/admin'
        }
    });
});

// üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    const users = loadUsers();
    console.log('==================================');
    console.log('üöÄ –°–ï–†–í–ï–† –ó–ê–ü–£–©–ï–ù!');
    console.log(`üìç –ü–æ—Ä—Ç: ${PORT}`);
    console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);
    console.log(`üìç –¢–µ—Å—Ç: http://localhost:${PORT}/api/test`);
    console.log(`üìç –ê–¥–º–∏–Ω: http://localhost:${PORT}/admin`);
    console.log('==================================');
});
